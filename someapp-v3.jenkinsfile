#!groovy

pipeline {
    agent any

    environment {
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        NEXUS_REPOSITORY = "sb1w001:6031"
    }

    stages {
        stage("Setup") {
            steps {
                echo "----- BUILD_NUMBER is $BUILD_NUMBER"
            }
        }

        stage("Docker Login") {
            steps {
                script {
                    withCredentials(
                            [usernamePassword(
                                    credentialsId: "sb-nexus",
                                    usernameVariable: "NEXUS_USERNAME",
                                    passwordVariable: "NEXUS_PASSWORD"
                            )]
                    ) {
                        echo "Logging into docker with $NEXUS_USERNAME/$NEXUS_PASSWORD"
                        sh "docker login --username $NEXUS_USERNAME --password $NEXUS_PASSWORD $NEXUS_REPOSITORY"
                    }
                }
            }
        }

        stage("Docker Build Image") {
            steps {
                script {
                    sh "docker build --tag sb-someapp-i3 --file someapp-v3.dockerfile ."
                }
            }
        }

        stage("Docker Run Container") {
            steps {
                //
                // try catch used so that next step is run even when this step fails.
                //
                try {
                    sh("""
                        echo "----- jenkins: env.BUILD_NUMBER is ${env.BUILD_NUMBER}"
                        echo "----- jenkins: env.USERPROFILE is ${env.USERPROFILE}"
                        echo "----- jenkins: env" && env | sort
                        echo "----- jenkins: sleep 10" && sleep 10
                        echo "----- jenkins: working directory is `pwd`"
                        echo "----- jenkins: ls" && ls -ltra
                        echo "----- jenkins: whoami is `whoami`"
                        echo "----- jenkins: user id is `id -u`"
                        echo "----- jenkins: group id is `id -g`"
                        echo "----- jenkins: creating a file" && touch jenkins-file-`date +"%y%m%d_%H%M%S"` && ls -ltra
                        echo "----- jenkins: creating a directory" && mkdir jenkins-dir-`date +"%y%m%d_%H%M%S"` && ls -ltra
                        echo "----- jenkins: ipconfig" && ipconfig
                        echo "----- jenkins: docker info" && docker info
                        echo "----- jenkins: git: git config" && git config --list --show-origin
                        echo "----- jenkins: node: node version" && node --version
                        echo "----- jenkins: node: npm version" && npm -version
                       #echo "----- jenkins: java: java version" && java --version
                       #echo "----- jenkins: maven: maven version" && mvn --version
                """)
                } catch (error) {
                    echo "----- error executing something, error is $error"
                    unstable("error executing something")
                }

                //
                // v3 fails!!!
                //
                // do not copy source, map drive.
                // run via --entrypoint on commandline.
                //
                // mapped drive overrides source in container.
                // therefore node_modules in container not seen.
                //
                // also sonar-scanner then seems to not use or work with 'host.docker.internal'?
                //
                sh "docker run --rm --entrypoint bash --name sb-someapp-c3 --volume '$WORKSPACE':/app sb-someapp-i3 someapp-entry.sh"
            }
        }
    }
}
